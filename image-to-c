#!./rx

This tool converts an image into a C array that can be compiled
as part of the `rx` binary. It's used to allow an installation
to not need a separate image file.

~~~
{{
  :capture{  &buffer:add &c:put set-hook ;
  :}         &c:put unhook ;
---reveal---
  :capture-output (qa-)
    [ buffer:set capture{ call } ] buffer:preserve ;
}}

'Output d:create
  #256 #1024 * n:inc allot
~~~

First up, I need to load the image to a buffer, so I allocate
space for this now.

~~~
#1024 'IMAGE-SIZE const
'Image d:create
  IMAGE-SIZE allot
~~~

Next is reading in the file. This is slightly complicated by
the need to pack the individual bytes into the memory cells.

So, a variable to track the open file ID.

~~~
'FID var
~~~

Then read in a byte.

~~~
:read-byte (n-)  @FID file:read #255 and ;
~~~

Reading in four bytes, I can shift and merge them back into
a single cell.

~~~
:read-cell (-n)
  read-byte    read-byte    read-byte  read-byte
  #-8 shift +  #-8 shift +  #-8 shift + ;
~~~

The next step is a word to return the size of the file in
cells.

~~~
'Cells var

:size (-n) @FID file:size #4 / dup !Cells ;
~~~

And then, using the above, read in the data from the file
to the image buffer.

~~~
:load-image (s-n)
  file:R file:open !FID
  &Image size [ read-cell over store n:inc ] times drop
  @FID file:close ;
~~~

Read in the file.

~~~
'ngaImage load-image
~~~

The final part is to export the image as a C array. To keep
line length to a reasonible length, I have a counter and add
a newline after 20 values.

~~~
'Count var
:EOL? &Count v:inc @Count #20 eq? [ nl #0 !Count ] if ;
~~~

The rest is easy. Display the relevant header bits, then
the cells, then the needed footer.

~~~
[ @Cells
  'int32\_t_ngaImageCells_=_%n; s:format s:put nl
  'int32\_t_ngaImage[]_=_{      s:format s:put nl

  &Image &Image #3 + fetch [ fetch-next n:put $, c:put EOL? ] times drop

  '}; s:put nl
] &Output capture-output

&Output 'patch-data file:spew
~~~
